{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso Completo de Python","text":""},{"location":"#indice-del-curso","title":"\u00cdndice del Curso","text":""},{"location":"#1-fundamentos-y-sintaxis-de-python-1-semana","title":"1. Fundamentos y Sintaxis de Python (1 semana)","text":"<ul> <li>Introducci\u00f3n a la sintaxis de Python y PEP 8: Est\u00e1ndares de estilo.</li> <li>Tipos de datos avanzados: Mutabilidad, uso de listas, tuplas, diccionarios y sets.</li> <li>Operadores avanzados: Operadores exclusivos de Python como <code>is</code>, <code>in</code>, y operadores de comprensi\u00f3n.</li> <li>Control de flujo y estructuras de control: Enfoque en comprensiones de listas y diccionarios.</li> </ul>"},{"location":"#2-funciones-y-modulos-en-profundidad-1-semana","title":"2. Funciones y M\u00f3dulos en Profundidad (1 semana)","text":"<ul> <li>Funciones avanzadas: Decoradores, funciones lambda, <code>*args</code> y <code>**kwargs</code>.</li> <li>M\u00f3dulos y paquetes: Creaci\u00f3n, importaci\u00f3n y estructura de paquetes.</li> <li>Manipulaci\u00f3n de funciones: Funciones de orden superior, closures y generaci\u00f3n de funciones personalizadas.</li> </ul>"},{"location":"#3-manejo-de-excepciones-y-gestion-de-errores-1-semana","title":"3. Manejo de Excepciones y Gesti\u00f3n de Errores (1 semana)","text":"<ul> <li>Manejo avanzado de excepciones: Encadenamiento de excepciones, <code>try</code>, <code>except</code>, <code>else</code>, <code>finally</code>.</li> <li>Excepciones personalizadas: Creaci\u00f3n de clases de excepciones propias.</li> <li>Manejo de contexto: Uso de <code>with</code> y <code>contextlib</code>.</li> </ul>"},{"location":"#4-programacion-orientada-a-objetos-poo-2-semanas","title":"4. Programaci\u00f3n Orientada a Objetos (POO) (2 semanas)","text":"<ul> <li>Clases y objetos en Python: Clases, atributos y m\u00e9todos.</li> <li>Herencia y polimorfismo avanzados: Herencia m\u00faltiple y uso de <code>super()</code>.</li> <li>M\u00e9todos m\u00e1gicos y sobrecarga de operadores: <code>__str__</code>, <code>__repr__</code>, <code>__add__</code>, entre otros.</li> <li>POO avanzada: Metaclases, uso de <code>@property</code> y patrones de dise\u00f1o aplicados.</li> </ul>"},{"location":"#5-programacion-funcional-y-herramientas-de-python-1-semana","title":"5. Programaci\u00f3n Funcional y Herramientas de Python (1 semana)","text":"<ul> <li>Comprehensions avanzadas: Comprensiones de listas, sets y diccionarios con condiciones.</li> <li>Iteradores y generadores: Creaci\u00f3n de generadores, uso de <code>yield</code> y <code>itertools</code>.</li> <li>Funciones como objetos de primera clase: Uso de <code>map()</code>, <code>filter()</code>, y <code>reduce()</code>.</li> </ul>"},{"location":"#6-manipulacion-y-gestion-de-archivos-1-semana","title":"6. Manipulaci\u00f3n y Gesti\u00f3n de Archivos (1 semana)","text":"<ul> <li>Lectura y escritura de archivos: Uso avanzado de <code>open()</code>.</li> <li>Manejo de archivos CSV, JSON y XML: Uso de m\u00f3dulos <code>csv</code>, <code>json</code> y <code>xml</code>.</li> <li>Manipulaci\u00f3n avanzada con bibliotecas externas: Uso de <code>pandas</code> para an\u00e1lisis de datos.</li> </ul>"},{"location":"#7-desarrollo-web-basico-y-avanzado-3-4-semanas","title":"7. Desarrollo Web B\u00e1sico y Avanzado (3-4 semanas)","text":"<ul> <li>Framework Flask: Creaci\u00f3n de APIs RESTful, rutas y formularios.</li> <li>Framework Django: Introducci\u00f3n, ORM, modelos y vistas.</li> <li>Despliegue y pruebas: Deploy en Heroku, configuraciones de seguridad y buenas pr\u00e1cticas.</li> </ul>"},{"location":"#8-automatizacion-de-tareas-1-semana","title":"8. Automatizaci\u00f3n de Tareas (1 semana)","text":"<ul> <li>Automatizaci\u00f3n b\u00e1sica: Uso de <code>os</code>, <code>shutil</code> y scripts para gesti\u00f3n del sistema de archivos.</li> <li>Web Scraping: Uso de <code>BeautifulSoup</code> y <code>Selenium</code> para extraer datos web.</li> <li>Automatizaci\u00f3n con APIs: Integraci\u00f3n y trabajo con APIs de terceros.</li> </ul>"},{"location":"#9-ciencia-de-datos-y-manipulacion-de-grandes-volumenes-de-datos-3-4-semanas","title":"9. Ciencia de Datos y Manipulaci\u00f3n de Grandes Vol\u00famenes de Datos (3-4 semanas)","text":"<ul> <li>Numpy y Pandas: Manipulaci\u00f3n de datos y manejo de arreglos.</li> <li>Matplotlib y Seaborn: Visualizaci\u00f3n de datos.</li> <li>Introducci\u00f3n a Scikit-learn: Modelos b\u00e1sicos de machine learning y pipelines.</li> </ul>"},{"location":"#10-buenas-practicas-y-patrones-de-diseno-1-semana","title":"10. Buenas Pr\u00e1cticas y Patrones de Dise\u00f1o (1 semana)","text":"<ul> <li>Testing avanzado: Uso de <code>unittest</code>, <code>pytest</code>, creaci\u00f3n de tests unitarios y mocks.</li> <li>Patrones de dise\u00f1o en Python: Singleton, Factory, Strategy y Observer.</li> <li>Buenas pr\u00e1cticas y optimizaci\u00f3n de c\u00f3digo: Profiling, <code>timeit</code> y an\u00e1lisis de memoria.</li> </ul>"},{"location":"#proyecto-final-aplicacion-completa-4-5-semanas","title":"Proyecto Final: Aplicaci\u00f3n Completa (4-5 semanas)","text":"<ul> <li>Desarrollo de una aplicaci\u00f3n completa: Integraci\u00f3n de temas como manipulaci\u00f3n de datos, desarrollo web y machine learning.</li> <li>Despliegue y publicaci\u00f3n: Deploy de la aplicaci\u00f3n en un servidor de producci\u00f3n (AWS, Heroku, etc).</li> <li>Documentaci\u00f3n y presentaci\u00f3n: Usando est\u00e1ndares de documentaci\u00f3n y estructura profesional.</li> </ul>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/","title":"Sintaxis B\u00e1sica de Python","text":""},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#indentacion","title":"Indentaci\u00f3n","text":"<p>En Python, la indentaci\u00f3n no es solo para legibilidad; es obligatoria y define el bloque de c\u00f3digo. Por convenci\u00f3n, se usan 4 espacios por nivel de indentaci\u00f3n.</p> <pre><code>def mi_funcion():\n    for i in range(5):\n        print(i)  # Esta l\u00ednea est\u00e1 indentada para que pertenezca al bucle for\n</code></pre>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#comentarios","title":"Comentarios","text":"<p>Python usa <code>#</code> para comentarios de una sola l\u00ednea. Los comentarios de varias l\u00edneas no tienen una sintaxis espec\u00edfica, pero puedes usar <code>\"\"\"</code> para crear comentarios de bloque (aunque t\u00e9cnicamente son strings multil\u00ednea, no comentarios puros).</p> <pre><code># Esto es un comentario de una l\u00ednea\n\n\"\"\"\nEste es un comentario de bloque.\nUsualmente usado para documentar funciones y clases.\n\"\"\"\n</code></pre>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#variables-y-asignacion","title":"Variables y Asignaci\u00f3n","text":"<p>No necesitas declarar el tipo de dato de una variable. Python es din\u00e1mico y fuerte, por lo que <code>x = 5</code> es una declaraci\u00f3n v\u00e1lida sin necesidad de <code>int</code> u otro tipo de datos. Las convenciones de nombre en PEP 8 sugieren nombres en <code>snake_case</code> para variables y funciones, y <code>CamelCase</code> para clases.</p> <pre><code>nombre_variable = \"Hola\"\nnombre_clase = MiClase\n</code></pre>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#estructuras-basicas-de-control","title":"Estructuras B\u00e1sicas de Control","text":"<p>Al igual que otros lenguajes, Python tiene <code>if</code>, <code>for</code>, y <code>while</code>, pero sin par\u00e9ntesis ni llaves.</p> <pre><code>if condicion:\n    # C\u00f3digo aqu\u00ed\nelif otra_condicion:\n    # Otro bloque de c\u00f3digo\nelse:\n    # Otro bloque\n</code></pre>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#pep-8-estandares-de-estilo-de-codigo-en-python","title":"PEP 8 - Est\u00e1ndares de Estilo de C\u00f3digo en Python","text":""},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#1-nombres-de-variables-y-funciones","title":"1. Nombres de Variables y Funciones","text":"<ul> <li>Usa <code>snake_case</code> para variables y funciones (<code>nombre_variable</code>, <code>nombre_funcion</code>).</li> <li>Para constantes, usa <code>MAY\u00daSCULAS_CON_GUIONES_BAJOS</code>.</li> <li>Las clases deben seguir el formato <code>CamelCase</code> (<code>NombreClase</code>).</li> </ul>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#2-espacios-en-blanco","title":"2. Espacios en Blanco","text":"<ul> <li>A\u00f1ade un espacio despu\u00e9s de <code>,</code>, <code>:</code>, y <code>;</code>, pero no antes.</li> <li>Usa una l\u00ednea en blanco para separar funciones y dos l\u00edneas en blanco para separar clases en m\u00f3dulos.</li> </ul>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#3-longitud-de-linea","title":"3. Longitud de L\u00ednea","text":"<p>Intenta limitar la longitud de l\u00ednea a 79 caracteres. Para seguir esta regla, puedes dividir l\u00edneas largas usando <code>\\</code> o par\u00e9ntesis.</p>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#4-comentarios-y-docstrings","title":"4. Comentarios y Docstrings","text":"<ul> <li>Los comentarios deben ser concisos y claros.</li> <li>Usa docstrings (<code>\"\"\"Comentario\"\"\"</code>) para documentar clases, m\u00e9todos y funciones.</li> <li>Los comentarios inline, si son necesarios, deben estar despu\u00e9s de al menos dos espacios.</li> </ul> <pre><code>def suma(a, b):\n    \"\"\"Devuelve la suma de dos n\u00fameros.\"\"\"\n    return a + b\n</code></pre>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#5-comparaciones","title":"5. Comparaciones","text":"<ul> <li>Usa <code>is</code> para comparar con <code>None</code>: <code>if variable is None:</code>.</li> <li>Usa <code>==</code> para comparar valores.</li> </ul>"},{"location":"01_fundamentos_sintaxis/introduccion_sintaxis/#ejercicio-breve","title":"Ejercicio Breve","text":"<p>Para familiarizarnos con PEP 8, intenta escribir el siguiente c\u00f3digo siguiendo estas recomendaciones de estilo:</p> <pre><code>def saluda(nombre, edad):\n    print(f\"Hola, {nombre}, tienes {edad} a\u00f1os.\")\n</code></pre>"},{"location":"01_fundamentos_sintaxis/tipos_datos/","title":"Tipos de datos avanzados","text":"<p>Python tiene varios tipos de datos que no son tan comunes en otros lenguajes, y entender c\u00f3mo usarlos de forma correcta es esencial para escribir c\u00f3digo eficiente.</p>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#1-listas-list","title":"1. Listas (list):","text":"<p>Las listas son colecciones ordenadas, lo que significa que los elementos tienen un orden espec\u00edfico. Son mutables, lo que significa que puedes modificar su contenido despu\u00e9s de haberlas creado.</p>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#caracteristicas-de-las-listas","title":"Caracter\u00edsticas de las listas:","text":"<ul> <li>Son ordenadas: Los elementos tienen un \u00edndice asociado.</li> <li>Son mutables: Puedes modificar, agregar o eliminar elementos.</li> <li>Permiten duplicados: Puedes tener el mismo valor m\u00e1s de una vez en la lista.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#operaciones-comunes-con-listas","title":"Operaciones comunes con listas:","text":"<pre><code># Crear una lista\nfrutas = [\"manzana\", \"pl\u00e1tano\", \"cereza\"]\nprint(frutas)\n\n# Acceder a un elemento (por \u00edndice)\nprint(frutas[0])  # 'manzana'\n\n# Modificar un elemento\nfrutas[1] = \"pera\"\nprint(frutas)\n\n# Agregar un elemento al final\nfrutas.append(\"kiwi\")\nprint(frutas)\n\n# Eliminar un elemento\nfrutas.remove(\"pera\")  # Elimina la primera ocurrencia de 'pera'\nprint(frutas)\n\n# Obtener el tama\u00f1o de la lista\nprint(len(frutas))  # 3\n\n# Crear una lista con elementos repetidos\nrepetidos = [1, 1, 2, 2, 3]\nprint(repetidos)\n\n</code></pre>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#usos-recomendados","title":"Usos recomendados:","text":"<ul> <li>Cuando necesites mantener un orden espec\u00edfico de elementos.</li> <li>Cuando quieras tener elementos modificables o agregar/quitar elementos durante la ejecuci\u00f3n.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#2-tuplas-tuple","title":"2. Tuplas (tuple):","text":"<p>Las tuplas son colecciones ordenadas, pero a diferencia de las listas, son inmutables. Esto significa que una vez que las creas, no puedes cambiar, agregar o eliminar elementos.</p>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#caracteristicas-de-las-tuplas","title":"Caracter\u00edsticas de las tuplas:","text":"<ul> <li>Son ordenadas: Los elementos tienen un \u00edndice asociado.</li> <li>Son inmutables: No puedes cambiar su contenido despu\u00e9s de crearlas.</li> <li>Permiten duplicados: Puedes tener el mismo valor m\u00e1s de una vez en la tupla.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#operaciones-comunes-con-tuplas","title":"Operaciones comunes con tuplas:","text":"<pre><code># Crear una tupla\ncolores = (\"rojo\", \"verde\", \"azul\")\nprint(colores)\n\n# Acceder a un elemento\nprint(colores[1])  # 'verde'\n\n# Las tuplas son inmutables, no puedes hacer esto:\n# colores[1] = \"amarillo\"  # Esto causar\u00eda un error\n\n# Las tuplas pueden contener elementos duplicados\nnumeros = (1, 1, 2, 3)\nprint(numeros)\n\n</code></pre>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#usos-recomendados_1","title":"Usos recomendados:","text":"<ul> <li>Cuando necesitas un conjunto de datos que no debe cambiar (inmutable).</li> <li>Cuando necesitas usar un valor como clave en un diccionario (debido a que las tuplas son inmutables y, por lo tanto, son hashable, a diferencia de las listas).</li> <li>Cuando el orden importa, pero no necesitas modificar la colecci\u00f3n.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#3-diccionarios-dict","title":"3. Diccionarios (dict):","text":"<p>Los diccionarios son colecciones de pares clave-valor. Son mutables, y puedes agregar, modificar o eliminar elementos f\u00e1cilmente. A diferencia de las listas y tuplas, no son ordenados en versiones anteriores a Python 3.7, pero a partir de Python 3.7+, los diccionarios mantienen el orden de inserci\u00f3n.</p>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#caracteristicas-de-los-diccionarios","title":"Caracter\u00edsticas de los diccionarios:","text":"<ul> <li>No son ordenados (en versiones anteriores a Python 3.7), pero mantienen el orden a partir de Python 3.7+.</li> <li>Son mutables: Puedes cambiar el valor asociado a una clave, agregar o eliminar claves.</li> <li>Las claves deben ser inmutables (por ejemplo, pueden ser cadenas, tuplas, pero no listas).</li> <li>No permiten duplicados en las claves: Cada clave debe ser \u00fanica.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#operaciones-comunes-con-diccionarios","title":"Operaciones comunes con diccionarios:","text":"<pre><code># Crear un diccionario\npersona = {\"nombre\": \"Juan\", \"edad\": 30, \"profesi\u00f3n\": \"ingeniero\"}\nprint(persona)\n\n# Acceder a un valor por su clave\nprint(persona[\"nombre\"])  # 'Juan'\n\n# Modificar un valor\npersona[\"edad\"] = 31\nprint(persona)\n\n# Agregar una nueva clave-valor\npersona[\"ciudad\"] = \"Madrid\"\nprint(persona)\n\n# Eliminar una clave\ndel persona[\"profesi\u00f3n\"]\nprint(persona)\n\n# Verificar si una clave existe\nprint(\"nombre\" in persona)  # True\n\n</code></pre>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#usos-recomendados_2","title":"Usos recomendados:","text":"<ul> <li>Cuando necesitas asociar claves \u00fanicas a valores.</li> <li>Para representar informaci\u00f3n estructurada de manera flexible (por ejemplo, datos de una persona como nombre, edad, etc.).</li> <li>Cuando necesitas realizar b\u00fasquedas r\u00e1pidas por clave.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#4-sets-set","title":"4. Sets (set):","text":"<p>Un set es una colecci\u00f3n desordenada de elementos \u00fanicos, es decir, no permite duplicados. Al igual que las listas y diccionarios, son mutables. Los sets son \u00fatiles cuando necesitas realizar operaciones de conjunto, como intersecci\u00f3n, uni\u00f3n y diferencia.</p>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#caracteristicas-de-los-sets","title":"Caracter\u00edsticas de los sets:","text":"<ul> <li>Son desordenados: No se garantiza el orden de los elementos.</li> <li>Son mutables: Puedes agregar y eliminar elementos.</li> <li>No permiten duplicados: Si intentas agregar un elemento que ya est\u00e1 presente, no se agregar\u00e1.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#operaciones-comunes-con-sets","title":"Operaciones comunes con sets:","text":"<pre><code># Crear un set\nnumeros = {1, 2, 3, 4, 5}\nprint(numeros)\n\n# Agregar un elemento\nnumeros.add(6)\nprint(numeros)\n\n# Intentar agregar un duplicado\nnumeros.add(3)  # No hace nada porque 3 ya est\u00e1 en el set\nprint(numeros)\n\n# Eliminar un elemento\nnumeros.remove(4)  # Esto eliminar\u00e1 el 4\nprint(numeros)\n\n# Realizar operaciones de conjunto\notro_set = {3, 4, 5, 6}\nunion = numeros | otro_set  # Uni\u00f3n\ninterseccion = numeros &amp; otro_set  # Intersecci\u00f3n\ndiferencia = numeros - otro_set  # Diferencia\nprint(union, interseccion, diferencia)\n\n</code></pre>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#usos-recomendados_3","title":"Usos recomendados:","text":"<ul> <li>Cuando no necesitas duplicados.</li> <li>Para realizar operaciones matem\u00e1ticas de conjunto, como la uni\u00f3n, intersecci\u00f3n y diferencia.</li> <li>Cuando quieres verificar la existencia de un elemento de manera r\u00e1pida.</li> </ul>"},{"location":"01_fundamentos_sintaxis/tipos_datos/#diferencias-clave-entre-listas-tuplas-diccionarios-y-sets","title":"Diferencias clave entre listas, tuplas, diccionarios y sets:","text":"Tipo de Dato Ordenado Mutable Permite Duplicados Ejemplo de Uso Lista S\u00ed S\u00ed S\u00ed Cuando necesitas un conjunto ordenado y modificable de elementos. Tupla S\u00ed No S\u00ed Cuando necesitas un conjunto inmutable de datos (ideal para claves en diccionarios). Diccionario No S\u00ed No (en las claves) Para asociar claves \u00fanicas a valores. Set No S\u00ed No Cuando no necesitas duplicados y realizas operaciones de conjunto."},{"location":"01_fundamentos_sintaxis/tipos_datos/#conclusion","title":"Conclusi\u00f3n:","text":"<p>Es importante elegir el tipo de dato adecuado en funci\u00f3n de tus necesidades. Si necesitas mantener un orden espec\u00edfico, usa una lista o tupla. Si necesitas almacenar datos en pares clave-valor, utiliza un diccionario. Y si solo te interesan los elementos \u00fanicos sin preocuparte del orden, elige un set.</p>"}]}